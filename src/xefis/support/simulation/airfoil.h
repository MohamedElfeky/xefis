/* vim:ts=4
 *
 * Copyleft 2008…2018  Michał Gawron
 * Marduk Unix Labs, http://mulabs.org/
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Visit http://www.gnu.org/licenses/gpl-3.0.html for more information on licensing.
 */

#ifndef XEFIS__SUPPORT__SIMULATION__AIRFOIL_H__INCLUDED
#define XEFIS__SUPPORT__SIMULATION__AIRFOIL_H__INCLUDED

// Standard:
#include <cstddef>

// Xefis:
#include <xefis/config/all.h>
#include <xefis/support/earth/air.h>
#include <xefis/support/math/space.h>
#include <xefis/support/simulation/n_body/body_part.h>
#include <xefis/support/simulation/n_body/body.h>
#include <xefis/support/simulation/airfoil_shape.h>
#include <xefis/support/simulation/atmosphere.h>


namespace xf::sim {

// X points to the leading edge vector, Y to the right, Z down:
using AirfoilFrame = PartFrame;


struct AirfoilControl
{
	/*
	 * Input
	 */

	// Deflection angle about the pivot axis of the AirfoilShape:
	si::Angle		deflection_angle	{ 0_deg };

	/*
	 * Output
	 */

	AngleOfAttack	angle_of_attack		{ 0_deg, 0_deg };
};


/**
 * Lift-generating airframe part.
 * Airfoil's frame of reference: X points to the leading edge of the wing, Y along the wing, Z points opposite to the generated lift.
 */
class Airfoil: public BodyPart<AirframeFrame, AirfoilFrame>
{
  public:
	// Ctor
	explicit
	Airfoil (AirfoilShape const&,
			 PositionRotation<AirframeFrame, AirfoilFrame> const& position_rotation,
			 si::Mass,
			 SpaceMatrix<si::MomentOfInertia, AirfoilFrame> const& moment_of_inertia);

	// Dtor
	virtual
	~Airfoil() = default;

	/**
	 * Control object.
	 */
	[[nodiscard]]
	AirfoilControl&
	control() noexcept
		{ return _control; }

	/**
	 * Control object.
	 */
	[[nodiscard]]
	AirfoilControl const&
	control() const noexcept
		{ return _control; }

	/**
	 * AirfoilShape object.
	 */
	[[nodiscard]]
	AirfoilShape const&
	shape() const noexcept
		{ return _shape; }

	/**
	 * Calculate resultant force-torque generated by the airfoil.
	 *
	 * \param	deflection_angle
	 *			Rotation angle of the airfoil about the pivot axis, that is Z axis of AirfoilShape.
	 * \param	relative_wind
	 *			Wind force expressed in body frame of reference.
	 */
	[[nodiscard]]
	ForceTorque<AirframeFrame>
	forces (AtmosphereState<AirframeFrame> const&) override;

  private:
	AirfoilControl	_control;
	AirfoilShape	_shape;
};


/**
 * Return rotation matrix for rotating airfoil's frame vectors to airframe's frame vectors, such that leading edge of the airfoil
 * points to the nose (positive X), and upper surface of the airfoil points up (negative Z).
 *
 * Useful for rotation of airfoils to typical airplane wing position.
 */
[[nodiscard]]
constexpr RotationMatrix<AirframeFrame, AirfoilFrame>
airfoil_to_airframe_rotation_for_wing()
{
	return { math::unit };
}


/**
 * Return rotation matrix for rotating airfoil's frame vectors to airframe's frame vectors, such that leading edge of the airfoil
 * points to the nose (positive X), and the upper surface points to the right side/right wing (positive Y).
 *
 * Useful for rotation of airfoils to rudder position.
 */
[[nodiscard]]
constexpr RotationMatrix<AirframeFrame, AirfoilFrame>
airfoil_to_airframe_rotation_for_rudder()
{
	return x_rotation<AirframeFrame, AirfoilFrame> (90_deg);
}

} // namespace xf::sim

#endif

